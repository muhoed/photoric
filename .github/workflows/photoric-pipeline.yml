name: "Photoric build pipeline"

on:
  push:
  pull_request:
    types: [opened, reopened]
    
  #schedule:
  #  - cron: '19 3 * * 1'

#defaults:
#  run:
#    working-directory: /home/runner/work/photoric

jobs:
  #analyze:
  #  name: CodeQL 
  #  runs-on: ubuntu-latest
  #  permissions:
  #    actions: read
  #    contents: read
  #    security-events: write

  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      language: [ 'javascript', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

  #  steps:
  #  - name: Checkout repository
  #    uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
  #  - name: Initialize CodeQL JS
  #    uses: github/codeql-action/init@v1
  #    with:
  #      languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

  #  - name: Perform CodeQL Analysis
  #    uses: github/codeql-action/analyze@v1

  lint_and_test:
    #needs: analyze
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # Python package
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest coverage
        python -m pip install -r requirements.txt
        python -m pip install setuptools wheel
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest

  packaging:
    environment: Package
    needs: lint_and_test
    name: Build package with setuptool and publish it to Github artifacts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Build package with setuptool
      run: python setup.py sdist bdist_wheel
    - name: Upload dist to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: photoric
        path: ./dist


  docker:
    environment: Container
    needs: packaging
    name: Create and push docker image
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Build the docker-compose stack
      run: docker-compose -f docker-compose.yml build
    #- name: Check running containers
    #  run: docker ps -a
    #- name: Check logs
    #  run: docker logs backend
    #- name: Run test suite
    #  run: docker exec backend pytest --skip-auth
    
    # upload image as artifact
    - name: Upload image
      uses: ishworkh/docker-image-artifact-upload@v1
      with:
        image: "photoric_photoric:latest"

    #- name: Login to DockerHub
    #  uses: docker/login-action@v1 
    #  with:
    #    username: ${{ secrets.DOCKERHUB_USERNAME }}
    #    password: ${{ secrets.DOCKERHUB_TOKEN }}

    #- name: push image to DockerHub
    #  run: docker-compose push
